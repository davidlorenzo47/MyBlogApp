{"ast":null,"code":"var _jsxFileName = \"D:\\\\MERN Project\\\\client\\\\src\\\\pages\\\\LoginPage.js\",\n  _s = $RefreshSig$();\n// // import { response } from \"express\";\n// import { useState } from \"react\";\n// import { Navigate } from \"react-router-dom\";\n\n// export default function LoginPage() {\n//     const [username, setUsername] = useState('');\n//     const [password, setPassword] = useState('');\n//     const [redirect, setRedirect] = useState(false);\n\n//     async function login(ev) {\n//         ev.preventDefault();\n//         const response = await fetch('http://localhost:4000/login', {\n//             //saving things for sessions\n//             method: 'POST',\n//             body: JSON.stringify({username, password}),\n//             headers: {'Content-Type': 'application/json'},\n//             credentials: 'include',  //cookie will be included to users browser \n//         });\n//         if (response.ok) {\n//             setRedirect(true);\n//         }\n//         else {  //if username and password does not match\n//             alert('wrong credentials');\n//         }\n//     }\n\n//     if (redirect) {\n//         return <Navigate to={'/'} /> //if response.ok is true then redirect to home page i.e if username and password is correct then login.\n//     }\n\n//     return (\n//         <form className=\"login\" onSubmit={login}>\n//             <h1>Login</h1>\n//             <input type=\"text\" \n//                 placeholder=\"username\" \n//                 value={username} \n//                 onChange={ev => setUsername(ev.target.value)}/>\n//             <input type=\"password\" \n//                 placeholder=\"password\" \n//                 value={password} \n//                 onChange={ev => setPassword(ev.target.value)}/>\n//             <button>Login</button>\n//         </form>\n//     );\n// }\n\n// import { response } from \"express\";\nimport { useState } from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LoginPage() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [redirect, setRedirect] = useState(false);\n  async function login(ev) {\n    ev.preventDefault();\n    const response = await fetch('http://localhost:4000/login', {\n      //saving things for sessions\n      method: 'POST',\n      body: JSON.stringify({\n        username,\n        password\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include' //cookie will be included to users browser \n    });\n\n    if (response.ok) {\n      setRedirect(true);\n    } else {\n      //if username and password does not match\n      alert('wrong credentials');\n    }\n  }\n  if (redirect) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: '/'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 16\n    }, this); //if response.ok is true then redirect to home page i.e if username and password is correct then login.\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"login\",\n    onSubmit: login,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"username\",\n      value: username,\n      onChange: ev => setUsername(ev.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      placeholder: \"password\",\n      value: password,\n      onChange: ev => setPassword(ev.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n}\n_s(LoginPage, \"akJCtea06E3X9APQvCKcOXGIZ6s=\");\n_c = LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["useState","Navigate","jsxDEV","_jsxDEV","LoginPage","_s","username","setUsername","password","setPassword","redirect","setRedirect","login","ev","preventDefault","response","fetch","method","body","JSON","stringify","headers","credentials","ok","alert","to","fileName","_jsxFileName","lineNumber","columnNumber","className","onSubmit","children","type","placeholder","value","onChange","target","_c","$RefreshReg$"],"sources":["D:/MERN Project/client/src/pages/LoginPage.js"],"sourcesContent":["// // import { response } from \"express\";\r\n// import { useState } from \"react\";\r\n// import { Navigate } from \"react-router-dom\";\r\n\r\n// export default function LoginPage() {\r\n//     const [username, setUsername] = useState('');\r\n//     const [password, setPassword] = useState('');\r\n//     const [redirect, setRedirect] = useState(false);\r\n\r\n//     async function login(ev) {\r\n//         ev.preventDefault();\r\n//         const response = await fetch('http://localhost:4000/login', {\r\n//             //saving things for sessions\r\n//             method: 'POST',\r\n//             body: JSON.stringify({username, password}),\r\n//             headers: {'Content-Type': 'application/json'},\r\n//             credentials: 'include',  //cookie will be included to users browser \r\n//         });\r\n//         if (response.ok) {\r\n//             setRedirect(true);\r\n//         }\r\n//         else {  //if username and password does not match\r\n//             alert('wrong credentials');\r\n//         }\r\n//     }\r\n\r\n//     if (redirect) {\r\n//         return <Navigate to={'/'} /> //if response.ok is true then redirect to home page i.e if username and password is correct then login.\r\n//     }\r\n    \r\n\r\n//     return (\r\n//         <form className=\"login\" onSubmit={login}>\r\n//             <h1>Login</h1>\r\n//             <input type=\"text\" \r\n//                 placeholder=\"username\" \r\n//                 value={username} \r\n//                 onChange={ev => setUsername(ev.target.value)}/>\r\n//             <input type=\"password\" \r\n//                 placeholder=\"password\" \r\n//                 value={password} \r\n//                 onChange={ev => setPassword(ev.target.value)}/>\r\n//             <button>Login</button>\r\n//         </form>\r\n//     );\r\n// }\r\n\r\n// import { response } from \"express\";\r\nimport { useState } from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nexport default function LoginPage() {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [redirect, setRedirect] = useState(false);\r\n\r\n    async function login(ev) {\r\n        ev.preventDefault();\r\n        const response = await fetch('http://localhost:4000/login', {\r\n            //saving things for sessions\r\n            method: 'POST',\r\n            body: JSON.stringify({username, password}),\r\n            headers: {'Content-Type': 'application/json'},\r\n            credentials: 'include'  //cookie will be included to users browser \r\n        });\r\n        if (response.ok) {\r\n            setRedirect(true);\r\n        }\r\n        else {  //if username and password does not match\r\n            alert('wrong credentials');\r\n        }\r\n    }\r\n\r\n    if (redirect) {\r\n        return <Navigate to={'/'}/> //if response.ok is true then redirect to home page i.e if username and password is correct then login.\r\n    }\r\n    \r\n\r\n    return (\r\n        <form className=\"login\" onSubmit={login}>\r\n            <h1>Login</h1>\r\n            <input type=\"text\" \r\n                placeholder=\"username\" \r\n                value={username} \r\n                onChange={ev => setUsername(ev.target.value)}/>\r\n            <input type=\"password\" \r\n                placeholder=\"password\" \r\n                value={password} \r\n                onChange={ev => setPassword(ev.target.value)}/>\r\n            <button>Login</button>\r\n        </form>\r\n    );\r\n}"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,eAAe,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EAChC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAE/C,eAAeY,KAAKA,CAACC,EAAE,EAAE;IACrBA,EAAE,CAACC,cAAc,CAAC,CAAC;IACnB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;MACxD;MACAC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAACd,QAAQ;QAAEE;MAAQ,CAAC,CAAC;MAC1Ca,OAAO,EAAE;QAAC,cAAc,EAAE;MAAkB,CAAC;MAC7CC,WAAW,EAAE,SAAS,CAAE;IAC5B,CAAC,CAAC;;IACF,IAAIP,QAAQ,CAACQ,EAAE,EAAE;MACbZ,WAAW,CAAC,IAAI,CAAC;IACrB,CAAC,MACI;MAAG;MACJa,KAAK,CAAC,mBAAmB,CAAC;IAC9B;EACJ;EAEA,IAAId,QAAQ,EAAE;IACV,oBAAOP,OAAA,CAACF,QAAQ;MAACwB,EAAE,EAAE;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,EAAC;EAChC;;EAGA,oBACI1B,OAAA;IAAM2B,SAAS,EAAC,OAAO;IAACC,QAAQ,EAAEnB,KAAM;IAAAoB,QAAA,gBACpC7B,OAAA;MAAA6B,QAAA,EAAI;IAAK;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACd1B,OAAA;MAAO8B,IAAI,EAAC,MAAM;MACdC,WAAW,EAAC,UAAU;MACtBC,KAAK,EAAE7B,QAAS;MAChB8B,QAAQ,EAAEvB,EAAE,IAAIN,WAAW,CAACM,EAAE,CAACwB,MAAM,CAACF,KAAK;IAAE;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACnD1B,OAAA;MAAO8B,IAAI,EAAC,UAAU;MAClBC,WAAW,EAAC,UAAU;MACtBC,KAAK,EAAE3B,QAAS;MAChB4B,QAAQ,EAAEvB,EAAE,IAAIJ,WAAW,CAACI,EAAE,CAACwB,MAAM,CAACF,KAAK;IAAE;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACnD1B,OAAA;MAAA6B,QAAA,EAAQ;IAAK;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpB,CAAC;AAEf;AAACxB,EAAA,CAzCuBD,SAAS;AAAAkC,EAAA,GAATlC,SAAS;AAAA,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}